version: 0.2.4

# code to execute before parsing
preamble: >
  @init_plot_env(); 
  const pgrad = -1.102e-3;
  const F = [-pgrad; 0.0];
  const nu = 1/29;
  const constit_rel_f = init_constit_srt_const(nu);
  const forcing_kf = init_guo_Fk(F);
  const datadir = "data/sukop";
  const filedir = "~/Documents/stabdata.dsv";
  const ni = 20;
  const nj = 12;
  const u = 1.00;
  const Re = nj * u / nu; 

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,     expr: false }
nu:       { value: nu,     expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
nsteps:   { value: 10000,   expr: false }
col_f:    init_col_srt(constit_rel_f, forcing_kf);

# boundaries
sbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

cbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - periodic_east_to_west!

# callback functions
callbacks:
  - plot_ux_profile_callback(convert(Int64, round(ni/2)), 10, 0.0)
  - print_step_callback(25, "ex1")
  - write_jld_file_callback(datadir, 500)

# clean-up, backup, write out
finally:
  - >
    (sim::Sim, k::Int) -> begin
      writedlm(joinpath(datadir, "ux_profile.dsv"), 
        extract_ux_prof_callback(convert(Int64, round(ni/2)))(sim), 
        ",");
    end
  - write_jld_file_callback(datadir)

# test for conditions to end simulation
test_for_term: is_steadystate_x
